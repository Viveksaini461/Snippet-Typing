{
  "snippets": [
    {
      "level": "beginner",
      "code": "#include <iostream>\nusing namespace std;\nint main() {\n  cout << \"Hello World\";\n  return 0;\n}"
    },
    {
      "level": "beginner",
      "code": "int a = 5;\nint b = 10;\ncout << a + b << endl;"
    },
    {
      "level": "beginner",
      "code": "int x = 20;\nif (x > 10) {\n  cout << \"x is big\";\n}"
    },
    {
      "level": "beginner",
      "code": "for (int i = 0; i < 3; i++) {\n  cout << i << endl;\n}"
    },
    {
      "level": "beginner",
      "code": "int num = 7;\ncout << (num % 2 == 0 ? \"Even\" : \"Odd\");"
    },
    {
      "level": "beginner",
      "code": "int sum(int a, int b) {\n  return a + b;\n}"
    },
    {
      "level": "beginner",
      "code": "string name = \"Coder\";\ncout << name << endl;"
    },
    {
      "level": "beginner",
      "code": "int age;\ncin >> age;\ncout << \"Age is \" << age;"
    },
    {
      "level": "beginner",
      "code": "float pi = 3.14;\ncout << pi << endl;"
    },
    {
      "level": "beginner",
      "code": "bool isTrue = true;\ncout << isTrue;"
    },

    {
      "level": "intermediate",
      "code": "#include <iostream>\nusing namespace std;\nvoid greet(string name) {\n  cout << \"Hello, \" << name << endl;\n}"
    },
    {
      "level": "intermediate",
      "code": "int factorial(int n) {\n  if (n == 0) return 1;\n  return n * factorial(n - 1);\n}"
    },
    {
      "level": "intermediate",
      "code": "#include <vector>\nvector<int> nums = {1, 2, 3};\nfor (int val : nums) {\n  cout << val << \" \";\n}"
    },
    {
      "level": "intermediate",
      "code": "#include <cmath>\ndouble sq = sqrt(16);\ncout << sq;"
    },
    {
      "level": "intermediate",
      "code": "int arr[5] = {10, 20, 30, 40, 50};\nfor (int i = 0; i < 5; i++) {\n  cout << arr[i] << endl;\n}"
    },
    {
      "level": "intermediate",
      "code": "void swap(int &a, int &b) {\n  int temp = a;\n  a = b;\n  b = temp;\n}"
    },
    {
      "level": "intermediate",
      "code": "int max(int a, int b) {\n  return (a > b) ? a : b;\n}"
    },
    {
      "level": "intermediate",
      "code": "#include <string>\nstring greet(string name) {\n  return \"Hi, \" + name;\n}"
    },
    {
      "level": "intermediate",
      "code": "#include <iomanip>\ndouble val = 12.3456;\ncout << fixed << setprecision(2) << val;"
    },
    {
      "level": "intermediate",
      "code": "int x = 0;\nwhile (x < 5) {\n  cout << x++ << endl;\n}"
    },

    {
      "level": "advanced",
      "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n  vector<int> v = {1, 2, 3};\n  for (auto it = v.begin(); it != v.end(); ++it) {\n    cout << *it << \" \";\n  }\n  return 0;\n}"
    },
    {
      "level": "advanced",
      "code": "#include <iostream>\nclass Student {\n  string name;\npublic:\n  Student(string n) { name = n; }\n  void display() { cout << name; }\n};"
    },
    {
      "level": "advanced",
      "code": "#include <map>\nmap<string, int> marks = {{\"Alice\", 90}, {\"Bob\", 80}};\nfor (auto &p : marks) {\n  cout << p.first << \": \" << p.second << endl;\n}"
    },
    {
      "level": "advanced",
      "code": "#include <fstream>\nofstream file(\"data.txt\");\nfile << \"Hello File\";\nfile.close();"
    },
    {
      "level": "advanced",
      "code": "#include <algorithm>\nvector<int> nums = {4, 2, 3};\nsort(nums.begin(), nums.end());"
    },
    {
      "level": "advanced",
      "code": "#include <stack>\nstack<int> s;\ns.push(1);\ns.push(2);\ncout << s.top();"
    },
    {
      "level": "advanced",
      "code": "#include <queue>\nqueue<int> q;\nq.push(10);\nq.push(20);\ncout << q.front();"
    },
    {
      "level": "advanced",
      "code": "template <typename T>\nT getMax(T a, T b) {\n  return (a > b) ? a : b;\n}"
    },
    {
      "level": "advanced",
      "code": "#include <set>\nset<int> s = {1, 2, 2, 3};\nfor (int x : s) {\n  cout << x << \" \";\n}"
    },
    {
      "level": "advanced",
      "code": "#include <chrono>\nauto start = chrono::high_resolution_clock::now();\n// code block\nauto end = chrono::high_resolution_clock::now();\nauto duration = chrono::duration_cast<chrono::microseconds>(end - start);\ncout << duration.count();"
    }
  ]
}
